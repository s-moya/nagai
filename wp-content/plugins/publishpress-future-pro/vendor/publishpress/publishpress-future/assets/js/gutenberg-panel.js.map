{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n    const {useEffect} = React;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const debugLog = (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n\n    const getCurrentTime = () => {\n        return (new Date()).getTime()/1000;\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: getCurrentTime(),\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null,\n            isFetchingTerms: false,\n        }\n\n        if (! config || ! config.postTypeDefaultConfig) {\n            return defaultState;\n        }\n\n        if (config.postTypeDefaultConfig.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.postTypeDefaultConfig.expireType) {\n            defaultState.futureAction = config.postTypeDefaultConfig.expireType;\n        }\n\n        if (config.defaultDate) {\n            defaultState.futureActionDate = parseInt(config.defaultDate);\n        } else {\n            defaultState.futureActionDate = getCurrentTime();\n        }\n\n        if (config.postTypeDefaultConfig.taxonomy) {\n            defaultState.futureActionTaxonomy = config.postTypeDefaultConfig.taxonomy;\n        }\n\n        if (config.postTypeDefaultConfig.terms) {\n            defaultState.futureActionTerms = config.postTypeDefaultConfig.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const FutureActionSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n        const isFetchingTerms = useSelect((select) => select('publishpress-future/store').getIsFetchingTerms(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName,\n            setIsFetchingTerms\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n\n            const newAttribute = {\n                'enabled': isChecked\n            }\n\n            // User default values to other fields\n            if (isChecked) {\n                setFutureAction(DEFAULT_STATE.futureAction);\n                setFutureActionDate(DEFAULT_STATE.futureActionDate);\n                setFutureActionTerms(DEFAULT_STATE.futureActionTerms);\n                setFutureActionTaxonomy(DEFAULT_STATE.futureActionTaxonomy);\n\n                newAttribute['action'] = DEFAULT_STATE.futureAction;\n                newAttribute['date'] = DEFAULT_STATE.futureActionDate;\n                newAttribute['terms'] = DEFAULT_STATE.futureActionTerms;\n                newAttribute['taxonomy'] = DEFAULT_STATE.futureActionTaxonomy;\n\n                fetchTerms();\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute({'action': value});\n        }\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n\n            setFutureActionDate(date);\n            editPostAttribute({'date': date});\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute({'terms': value});\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = (callback) => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n            debugLog('fetchFutureActionData', data);\n\n            setFutureActionEnabled(data.enabled).then(callback);\n            setFutureAction(data.action);\n            setFutureActionDate((new Date(data.date)).getTime()/1000);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            debugLog('fetchTerms', 'Fetching terms...');\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            setIsFetchingTerms(true);\n\n            debugLog('futureActionTaxonomy', futureActionTaxonomy);\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                debugLog('fetchTerms', 'Fetching categories...');\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    debugLog('list', list);\n\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                    setIsFetchingTerms(false);\n                });\n            } else {\n                debugLog('fetchTerms', 'Fetching taxonomies...');\n                apiFetch({\n                    path: addQueryArgs(`publishpress-future/v1/taxonomies/` + postType),\n                }).then((response) => {\n                    debugLog('response', response);\n\n                    if (parseInt(response.count) > 0) {\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                        }).then((taxAttributes) => {\n                            debugLog('taxAttributes', taxAttributes);\n                            // fetch all terms\n                            apiFetch({\n                                path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                            }).then((terms) => {\n                                debugLog('terms', terms);\n                                terms.forEach(term => {\n                                    termsListByName[decodeEntities(term.name)] = term;\n                                    termsListById[term.id] = decodeEntities(term.name);\n                                });\n\n                                setTermsListByName(termsListByName);\n                                setTermsListById(termsListById);\n                                setTaxonomyName(decodeEntities(taxAttributes.name));\n                                setIsFetchingTerms(false);\n                            });\n                        });\n                    } else {\n                        debugLog('fetchTerms', 'No taxonomies found');\n                    }\n                });\n            }\n        }\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy,\n                    browser_timezone_offset: new Date().getTimezoneOffset()\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n            debugLog('editPostAttribute', newAttribute, attribute);\n        }\n\n        useEffect(() => {\n            fetchFutureActionData();\n\n            // We need to get the value directly from the store because the value from the state is not updated yet\n            const enabled = select('publishpress-future/store').getFutureActionEnabled();\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n\n            debugLog('enabled', enabled);\n            debugLog('isCleanNewPost', isCleanNewPost);\n\n            if (enabled) {\n                if (isCleanNewPost) {\n                    handleEnabledChange(true);\n                }\n\n                fetchTerms();\n            }\n        }, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        const currentDate = futureActionDate;\n        debugLog('futureActionDate', futureActionDate);\n        debugLog('currentDate', currentDate);\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.panelTitle} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow className={'future-action-date-panel'}>\n                            <DateTimePicker\n                                currentDate={currentDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is12hours}\n                                startOfWeek={config.startOfWeek}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.action}\n                            value={futureAction}\n                            options={config.actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n\n                        {\n                            String(futureAction).includes('category') && (\n                                isFetchingTerms && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                )\n                                || (! futureActionTaxonomy && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTaxonomyFound}</p>\n                                    )\n                                    || (\n                                        isEmpty(keys(termsListByName)) && (\n                                            <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTermsFound}</p>\n                                        )\n                                        || (\n                                            <FormTokenField\n                                                label={config.taxonomyName}\n                                                value={selectedTerms}\n                                                suggestions={Object.keys(termsListByName)}\n                                                onChange={handleTermsChange}\n                                                maxSuggestions={10}\n                                            />\n                                        )\n                                    )\n                                )\n                            )\n                        }\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    registerPlugin('publishpress-future-action', {\n        render: FutureActionSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","defaultState","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","useEffect","React","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","apiFetch","debugLog","description","message","console","isDebugEnabled","debug","getCurrentTime","Date","getTime","DEFAULT_STATE","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","isFetchingTerms","postTypeDefaultConfig","autoEnable","expireType","defaultDate","parseInt","taxonomy","terms","split","map","term","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","getIsFetchingTerms","render","handleEnabledChange","isChecked","newAttribute","fetchTerms","editPostAttribute","postType","getCurrentPostType","path","per_page","then","list","forEach","cat","name","id","strings","category","response","count","context","taxAttributes","rest_base","attribute","publishpress_future_action","enabled","date","browser_timezone_offset","getTimezoneOffset","Object","entries","value","getEditedPostAttribute","callback","isCleanNewPost","selectedTerms","length","currentDate","title","panelTitle","icon","initialOpen","className","label","enablePostExpiration","checked","onChange","__nextRemoveHelpButton","is12Hour","is12hours","startOfWeek","options","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","suggestions","maxSuggestions","window","postExpiratorPanelConfig"],"sourceRoot":""}